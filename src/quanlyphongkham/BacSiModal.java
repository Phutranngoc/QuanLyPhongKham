/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quanlyphongkham;

import Entity.BacSi;
import DAO.BacSiDAO;
import Entity.BacSi.BacSiModalCallback;
import Entity.Benhnhan;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.Auth;
import util.MsgBox;
import util.Xjdbc;

/**
 *
 * @author ADMIN
 */
public class BacSiModal extends javax.swing.JDialog {

    private Boolean isUpdate; //Check xem đang cập nhật hay tạo mới
    private BacSiModalCallback callback; // Trường callback

    /**
     * Creates new form Doctor
     */
    public BacSiModal(java.awt.Frame parent, boolean isVisible, Boolean isUpdate, BacSiModalCallback callback) {

        super(parent, isVisible);
        initComponents();
        this.isUpdate = isUpdate; // Lưu trạng thái
        this.callback = callback; // Gán callback
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        bacSiModalTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        txtMaBS = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTenBS = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        rdoNam = new javax.swing.JRadioButton();
        rdoNu = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtGhiChu = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTuoi = new javax.swing.JTextField();
        txtNgaySinh = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtChuyenNganh = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDiaChi = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(738, 932));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(null);

        bacSiModalTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bacSiModalTitle.setText("Thêm mới bác sĩ");
        jPanel2.add(bacSiModalTitle);
        bacSiModalTitle.setBounds(15, 5, 400, 22);
        jPanel2.add(jSeparator1);
        jSeparator1.setBounds(3, 32, 890, 3);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Họ Và Tên BS");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(15, 83, 111, 22);

        txtMaBS.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel2.add(txtMaBS);
        txtMaBS.setBounds(140, 40, 410, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Mã Bác Sĩ");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(15, 41, 77, 22);

        txtTenBS.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel2.add(txtTenBS);
        txtTenBS.setBounds(140, 80, 410, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Giới Tính");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(15, 240, 71, 22);

        buttonGroup1.add(rdoNam);
        rdoNam.setText("Nam");
        jPanel2.add(rdoNam);
        rdoNam.setBounds(140, 240, 49, 21);

        buttonGroup1.add(rdoNu);
        rdoNu.setText("Nữ");
        jPanel2.add(rdoNu);
        rdoNu.setBounds(200, 240, 39, 21);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Số điện thoại");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(15, 200, 120, 30);

        txtSDT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtSDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTActionPerformed(evt);
            }
        });
        jPanel2.add(txtSDT);
        txtSDT.setBounds(140, 200, 410, 30);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Ghi chú");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(15, 320, 70, 22);

        txtGhiChu.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel2.add(txtGhiChu);
        txtGhiChu.setBounds(140, 320, 410, 50);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Năm sinh");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(15, 120, 74, 22);

        txtTuoi.setEditable(false);
        txtTuoi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel2.add(txtTuoi);
        txtTuoi.setBounds(280, 120, 50, 30);

        txtNgaySinh.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtNgaySinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgaySinhActionPerformed(evt);
            }
        });
        jPanel2.add(txtNgaySinh);
        txtNgaySinh.setBounds(140, 120, 121, 30);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Chuyên Ngành");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(15, 160, 116, 22);

        txtChuyenNganh.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel2.add(txtChuyenNganh);
        txtChuyenNganh.setBounds(140, 160, 410, 30);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Địa Chỉ");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(15, 270, 57, 22);

        txtDiaChi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel2.add(txtDiaChi);
        txtDiaChi.setBounds(140, 270, 410, 40);

        btnAdd.setText("Xác nhận");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel2.add(btnAdd);
        btnAdd.setBounds(440, 400, 110, 30);

        btnNew.setText("Làm mới");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jPanel2.add(btnNew);
        btnNew.setBounds(450, 7, 100, 23);

        btnExit.setText("Đóng");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel2.add(btnExit);
        btnExit.setBounds(320, 400, 110, 30);

        jLabel11.setText("tuổi");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(340, 130, 21, 16);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 580, 470));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Background/vector-MAY-2020-112.jpg"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(700, 500));
        jLabel1.setMinimumSize(new java.awt.Dimension(700, 500));
        jLabel1.setPreferredSize(new java.awt.Dimension(700, 500));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 738));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
        // TODO add your handling code here:
        if (!Auth.isManager()) {
            MsgBox.alert(this, "Bạn không có quyền thực hiện các tác vụ này!");
            return;
        }
        if (checkform()) {
            if (checkInsert()) {
                this.insert();
            }
        }
    }//GEN-LAST:event_btnAddMouseClicked

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        this.clearForm();
        // Check if txtMaBS is disabled, and enable it if necessary
        if (!txtMaBS.isEnabled()) {
            txtMaBS.setEnabled(true);
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void txtNgaySinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgaySinhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgaySinhActionPerformed

    private void txtSDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSDTActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if (!Auth.isManager()) {
            MsgBox.alert(this, "Bạn không có quyền thực hiện các tác vụ này!");
            return;
        }
        if (checkform()) {
            if (this.isUpdate) {
                this.update();
            } else {
                this.insert();
            }
            this.dispose();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BacSiModal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BacSiModal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BacSiModal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BacSiModal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BacSiModal dialog = new BacSiModal(new javax.swing.JFrame(), true, false, new BacSiModalCallback() {
                    @Override
                    public void onBacSiAdded() {

                    }
                });
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bacSiModalTitle;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNew;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JTextField txtChuyenNganh;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtGhiChu;
    private javax.swing.JTextField txtMaBS;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenBS;
    private javax.swing.JTextField txtTuoi;
    // End of variables declaration//GEN-END:variables
 BacSiDAO dao = new BacSiDAO();
    int row = -1;

    BacSi getForm() {
        BacSi nv = new BacSi();
        nv.setMaBS(txtMaBS.getText());
        nv.setTenBS(txtTenBS.getText());
        nv.setChuyennganh(txtChuyenNganh.getText());
        if (rdoNam.isSelected()) {
            nv.setGioitinh(rdoNam.getText());
        }
        if (rdoNu.isSelected()) {
            nv.setGioitinh(rdoNu.getText());
        }
        nv.setDiachi(txtDiaChi.getText());
        nv.setGhiChu(txtGhiChu.getText());
        nv.setNgaysinh(txtNgaySinh.getText());
        nv.setSDT(txtSDT.getText());

        return nv;
    }

    void setForm(BacSi nv) {
        txtMaBS.setText(nv.getMaBS());
        txtTenBS.setText(nv.getTenBS());
        txtChuyenNganh.setText(nv.getChuyennganh());
        txtGhiChu.setText(nv.getGhiChu());
        txtNgaySinh.setText(nv.getNgaysinh());
        txtSDT.setText(nv.getSDT());
        txtDiaChi.setText(nv.getDiachi());

        if (this.isUpdate) {
            bacSiModalTitle.setText("Cập nhật " + nv.getTenBS() + " (" + nv.getMaBS() + ")");
        }

        // Set gender
        if (nv.getGioitinh().equalsIgnoreCase("Nam")) {
            rdoNam.setSelected(true);
        } else if (nv.getGioitinh().equalsIgnoreCase("Nữ")) {
            rdoNu.setSelected(true);
        }

        txtSDT.setText(nv.getSDT());

        // Format the date from ngaysinh (String) to DD/MM/YYYY
        String ngaysinhStr = nv.getNgaysinh(); // Assuming this returns a date in "yyyy-MM-dd" format
        if (ngaysinhStr != null) {
            try {
                SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
                SimpleDateFormat outputFormat = new SimpleDateFormat("dd/MM/yyyy");
                Date date = inputFormat.parse(ngaysinhStr);
                String formattedDate = outputFormat.format(date);
                txtNgaySinh.setText(formattedDate);
            } catch (ParseException e) {
                e.printStackTrace();
                txtNgaySinh.setText(""); // Handle parsing error
            }
        } else {
            txtNgaySinh.setText(""); // Handle null case
        }

        txtTuoi.setText(String.valueOf(TinhTuoi()));
    }

    void insert() {
        BacSi bs = this.getForm();
        try {
            // Convert the date format from dd/MM/yyyy to yyyy-MM-dd
            String inputDate = bs.getNgaysinh(); // Assuming ngaySinh is a String in dd/MM/yyyy format

            // Define the date format you expect to receive (dd/MM/yyyy)
            SimpleDateFormat inputFormat = new SimpleDateFormat("dd/MM/yyyy");
            Date date = inputFormat.parse(inputDate);  // Parse the input date

            // Define the date format the database expects (yyyy-MM-dd)
            SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");
            String formattedDate = outputFormat.format(date);  // Format the date

            // Set the formatted date back into the object
            bs.setNgaysinh(formattedDate);
            dao.insert(bs);

            this.clearForm(); // xóa trắng form
            MsgBox.alert(this, "Thêm mới thành công!");
            if (callback != null) {
                callback.onBacSiAdded();// Gọi callback sau khi cập nhật thành công
            }

        } catch (Exception e) {
            MsgBox.alert(this, "Cập nhật thất bại!");
            System.out.println(e);
        }
    }

    void update() {
        BacSi bs = this.getForm();
        try {
            String inputDate = bs.getNgaysinh(); // Assuming ngaySinh is a String in dd/MM/yyyy format

            // Define the date format you expect to receive (dd/MM/yyyy)
            SimpleDateFormat inputFormat = new SimpleDateFormat("dd/MM/yyyy");
            Date date = inputFormat.parse(inputDate);  // Parse the input date

            // Define the date format the database expects (yyyy-MM-dd)
            SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");
            String formattedDate = outputFormat.format(date);  // Format the date

            // Set the formatted date back into the object
            bs.setNgaysinh(formattedDate);
            dao.update(bs); // cập nhật

            this.setForm(bs);

            MsgBox.alert(this, "Cập nhật thành công!");
            if (callback != null) {
                callback.onBacSiAdded();// Gọi callback sau khi cập nhật thành công
            }

        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Cập nhật thất bại!");
        }
    }

    void init() {
        setLocationRelativeTo(null); // đưa cửa sổ ra giữa màn hình

    }

    void clearForm() {
        txtChuyenNganh.setText("");
        txtGhiChu.setText("");
        txtMaBS.setText("");
        txtNgaySinh.setText("");
        txtSDT.setText("");
        txtTenBS.setText("");
        txtTuoi.setText("");
        txtDiaChi.setText("");
        rdoNam.setSelected(true);
    }

    boolean checkform() {
        String sdt = "0[0-9]{9}";
        String regex = "^\\d{2}/\\d{2}/\\d{4}$";
        if (txtMaBS.getText().equalsIgnoreCase("")) {
            MsgBox.alert(this, "Mã bác sĩ không được trống!");
            return false;
        } else if (txtChuyenNganh.getText().equalsIgnoreCase("")) {
            MsgBox.alert(this, "Bạn chưa nhập chuyên ngành!");
            return false;
        } else if (txtDiaChi.getText().equalsIgnoreCase("")) {
            MsgBox.alert(this, "Bạn chưa nhập địa chỉ!");
            return false;
        } 

        else if (txtNgaySinh.getText().equalsIgnoreCase("")) {
            MsgBox.alert(this, "Bạn chưa nhập Ngày sinh!");
            return false;
        } else if (txtSDT.getText().equalsIgnoreCase("")) {
            MsgBox.alert(this, "Bạn chưa nhập số điện thoại!");
            return false;
        } else if (txtTenBS.getText().equalsIgnoreCase("")) {
            MsgBox.alert(this, "Bạn chưa nhập tên bác sĩ!");
            return false;
        } else if (!txtNgaySinh.getText().matches(regex)) {
            MsgBox.alert(this, "Bạn nhập sai định dạng ngày sinh, hãy kiểm tra lại(DD/MM/YYYY)!");
            return false;
        } else if (!txtSDT.getText().matches(sdt)) {
            MsgBox.alert(this, "Không đúng định dạng số điện thoại");
            return false;
        }
        return true;
    }

    int TinhTuoi() {
        try {
            BacSiDAO dao = new BacSiDAO();
            BacSi list = dao.selectById(txtMaBS.getText());
            String ngaysinhh = list.getNgaysinh(); // Assuming the format is "YYYY-MM-DD"

            // Parse the birth date
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar birthCal = Calendar.getInstance();
            birthCal.setTime(sdf.parse(ngaysinhh));

            // Get current date
            Calendar today = Calendar.getInstance();

            // Calculate age
            int tuoi = today.get(Calendar.YEAR) - birthCal.get(Calendar.YEAR);

            // Adjust for whether the birthday has occurred this year
            if (today.get(Calendar.MONTH) < birthCal.get(Calendar.MONTH)
                    || (today.get(Calendar.MONTH) == birthCal.get(Calendar.MONTH) && today.get(Calendar.DAY_OF_MONTH) < birthCal.get(Calendar.DAY_OF_MONTH))) {
                tuoi--;
            }

            return tuoi;

        } catch (ParseException e) {
            e.printStackTrace(); // Handle the exception as needed
            return 0; // Or handle as needed
        }
    }

    public List<String> selectID() {
        String sql = "select MaBS from BacSi";
        List<String> list = new ArrayList<>();
        try {
            ResultSet rs = Xjdbc.query(sql);
            while (rs.next()) {
                list.add(rs.getString("MaBS"));
            }
            rs.getStatement().getConnection().close();
            return list;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    boolean checkInsert() {
        List<String> list = selectID();
        for (String ma : list) {
            if (txtMaBS.getText().equalsIgnoreCase(ma)) {
                MsgBox.alert(this, "Mã bác sĩ đã tồn tại!");
                return false;
            }
        }
        return true;
    }
}
