/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quanlyphongkham;

import Entity.DonThuoc;
import java.awt.Color;
import util.Xjdbc;
import DAO.DonThuocDAO;
import DAO.PhieuKhamDAO;
import Entity.DonThuoc.DonThuocModalCallback;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.Auth;
import util.MsgBox;

/**
 *
 * @author ADMIN
 */
public class DonThuocPage extends javax.swing.JFrame {

    private void initDoctorMap() {
        String sql = "SELECT MaBS, TenBS FROM BacSi";
        try {
            ResultSet rs = Xjdbc.query(sql);
            while (rs.next()) {
                String maBS = rs.getString("MaBS").trim(); // Tránh khoảng trắng
                String tenBS = rs.getString("TenBS").trim(); // Tránh khoảng trắng
                doctorMap.put(maBS, tenBS);
                System.out.println("Mã BS: " + maBS + ", Tên BS: " + tenBS); // In ra để kiểm tra
            }
            rs.getStatement().getConnection().close();
        } catch (SQLException e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lỗi khi tải tên bác sĩ.");
        }
    }

    /**
     * Creates new form Doctor
     */
    public DonThuocPage() {
        initDoctorMap();
        initComponents();
        init();
        setupTableMouseListener();
    }

    private Map<String, String> doctorMap = new HashMap<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDanhSach = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(738, 932));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        tblDanhSach.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblDanhSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã đơn thuốc", "Bác sĩ kê đơn", "Liều Dùng", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDanhSach.setRowHeight(30);
        tblDanhSach.setRowMargin(4);
        tblDanhSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDanhSachMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDanhSach);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 970, 440));

        jTextField1.setToolTipText("Tìm kiếm theo mã đơn thuốc, mã bác sĩ");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 190, 30));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel1.setText("Danh sách đơn thuốc");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        jButton1.setText("Tìm kiếm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 100, 30));

        btnAdd.setText("Thêm Mới");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, 110, 30));

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel2.setText("Quản lý đơn thuốc");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, -1, -1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Background/vector-MAY-2020-112.jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 740));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblDanhSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDanhSachMouseClicked
        if (evt.getClickCount() == 1) {
            this.row = tblDanhSach.getSelectedRow();
            int column = tblDanhSach.columnAtPoint(evt.getPoint()); // Lấy cột được nhấn

            // Kiểm tra nếu cột không phải là cột "Xóa"
            if (column != 3) {
                this.row = row; // Cập nhật hàng được chọn
                this.edit();
            }
        }
    }//GEN-LAST:event_tblDanhSachMouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Lấy giá trị tìm kiếm từ jTextField1
        String keyword = jTextField1.getText().trim();

        // Kiểm tra nếu keyword không rỗng
        if (!keyword.isEmpty()) {
            // Gọi phương thức tìm kiếm từ dao
            List<DonThuoc> results = dao.searchByCodeOrName(keyword);

            // Cập nhật bảng với dữ liệu mới
            fillTable(results);
        } else {
            // Nếu không có gì để tìm kiếm, có thể load lại toàn bộ danh sách bác sĩ
            loadAllDonThuoc(); // Phương thức này cần được tạo để load lại tất cả bác sĩ
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        this.create();
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DonThuocPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DonThuocPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DonThuocPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DonThuocPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel panel;
    private javax.swing.JTable tblDanhSach;
    // End of variables declaration//GEN-END:variables
 DonThuocDAO dao = new DonThuocDAO();
    PhieuKhamDAO pkdao = new PhieuKhamDAO();
    int row = -1;

    String INSERT_DonThuoc = "insert into DonThuoc(MaDT,MaBS,Lieudung) values(?,?,?)";
    String INSERT_ChiTietDonThuoc = "insert into Chitiet_DonThuoc_Thuoc(MaThuoc,MaDT) values(?,?)";
    String UPDATE_SQL = "update DonThuoc set MaBS=?,Lieudung=? where MaDT=?";
    String UPDATE_CT = "update Chitiet_DonThuoc_Thuoc set MaThuoc=? where MaDT=? and MaThuoc=?";
    String DELETE_DT = "delete from DonThuoc where MaDT=?";
    String DELETE_DTCT = "DELETE FROM Chitiet_DonThuoc_Thuoc WHERE MaDT = ?";
    String SELECT_ALL_SQL = "select * from DonThuoc";

    private void delete(String maDT) {
        if (!Auth.isManager()) {
            MsgBox.alert(this, "Bạn không có quyền xóa");
        } else {
            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có thật sự muốn xóa đơn thuốc này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    // Xóa các chi tiết đơn thuốc trước

                    Xjdbc.update(DELETE_DTCT, maDT);
                    // Sau đó xóa đơn thuốc chính
                    Xjdbc.update(DELETE_DT, maDT);

                    this.loadAllDonThuoc();
                    MsgBox.alert(this, "Xóa đơn thuốc thành công!");
                } catch (Exception e) {
                    MsgBox.alert(this, "Xóa đơn thuốc thất bại. Vui lòng kiểm tra lại.");

                }
            }
        }
    }

    void create() {
        // Tạo một modal BacSiForm và hiển thị nó
        DonThuocModal modal = new DonThuocModal(this, true, false, new DonThuocModalCallback() {
            @Override
            public void onDonThuocAdded() {
                init(); // Gọi phương thức init() để cập nhật danh sách
            }
        });
        modal.setVisible(true);

    }

    void edit() {
        String madt = (String) tblDanhSach.getValueAt(this.row, 0);
        DonThuoc dt = dao.selectById(madt);
        // Mở modal DonThuocModal và truyền đối tượng dt
        DonThuocModal modal = new DonThuocModal(this, true, true, new DonThuocModalCallback() {
            @Override
            public void onDonThuocAdded() {
                init(); // Gọi phương thức init() để cập nhật danh sách
            }
        });
        modal.setDonThuoc(dt); // Truyền đối tượng dt vào modal
        modal.setVisible(true); // Mở modal
    }

    void fillTable(List<DonThuoc> list) {
        DefaultTableModel model = (DefaultTableModel) tblDanhSach.getModel();
        model.setRowCount(0);

        try {
            for (DonThuoc th : list) {
                // Lấy tên bác sĩ từ Map dựa trên mã bác sĩ
                String maBSFromList = th.getMaBS().trim(); // Loại bỏ khoảng trắng nếu có
                String tenBS = doctorMap.getOrDefault(maBSFromList, "Không rõ");
                String maVaTenBS = th.getMaBS() + " - " + tenBS;

                Object[] row = {
                    th.getMaDT(),
                    maVaTenBS, // Mã và tên bác sĩ
                    th.getLieudung(),
                    "Xóa"
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
        }
    }

    void setupTableMouseListener() {
        tblDanhSach.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblDanhSach.rowAtPoint(e.getPoint());  // Lấy chỉ số dòng được nhấn
                int col = tblDanhSach.columnAtPoint(e.getPoint());  // Lấy chỉ số cột được nhấn

                // Kiểm tra nếu người dùng nhấn vào cột cuối cùng (cột "Xóa")
                if (col == tblDanhSach.getColumnCount() - 1) {
                    DefaultTableModel model = (DefaultTableModel) tblDanhSach.getModel();
                    String maDT = (String) tblDanhSach.getValueAt(row, 0); // Lấy mã bệnh nhân
                    delete(maDT);  // Xóa dòng tương ứng
                }
            }
        });
    }

    public void loadAllDonThuoc() {
        List<DonThuoc> list = dao.selectALL(); // Giả sử bạn có phương thức này trong DAO
        fillTable(list);
    }

    void init() {
        setLocationRelativeTo(null); // đưa cửa sổ ra giữa màn hình
        this.loadAllDonThuoc(); // 
    }

    public List<String> selectThuoc() {
        String sql = "select MaThuoc+ '-' +TenThuoc as Thuoc from Thuoc";
        List<String> list = new ArrayList<>();
        try {
            ResultSet rs = Xjdbc.query(sql);
            while (rs.next()) {
                list.add(rs.getString("Thuoc"));
            }
            rs.getStatement().getConnection().close();
            return list;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public List<String> selectID() {
        String sql = "select MaDT from DonThuoc";
        List<String> list = new ArrayList<>();
        try {
            ResultSet rs = Xjdbc.query(sql);
            while (rs.next()) {
                list.add(rs.getString("MaDT"));
            }
            rs.getStatement().getConnection().close();
            return list;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<String> selectIDBS() {
        String sql = "select MaBS from BacSi";
        List<String> list = new ArrayList<>();
        try {
            ResultSet rs = Xjdbc.query(sql);
            while (rs.next()) {
                list.add(rs.getString("MaBS"));
            }
            rs.getStatement().getConnection().close();
            return list;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

}
